# upstream docker-vircadia-web {
#     server vircadia-web:8080;
# }
# upstream docker-vircadia-ice {
#     server vircadia-ice:7337;
# }
# upstream docker-vircadia-domain {
#     server vircadia-domain:40100;
# }
# upstream docker-vircadia-dashboard {
#     server vircadia-dashboard:8088;
# }
upstream docker-vircadia-metaverse {
    server vircadia-metaverse:9400;
}

# server {
#     listen 80;
#     listen [::]:80;
#     server_name web.innoxai.com www.innoxai.com;
#     return 301 https://web.innoxai.com$request_uri;
# }
# server {
#     listen 443 ssl;
#     listen [::]:443;
#     server_name web.innoxai.com;
#     server_tokens off;
#     ssl_certificate /etc/ssl/certs/web.crt;
#     ssl_certificate_key /etc/ssl/private/web.key;
#     location / {
#         proxy_pass        http://docker-vircadia-web;
#         proxy_set_header  Host              $host;
#         proxy_set_header  X-Real-IP         $remote_addr;
#         proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;
#         proxy_set_header  X-Forwarded-Host  $server_name;
#     }
# }

# server {
#     listen 80;
#     listen [::]:80;
#     server_name domain.innoxai.com;
#     return 301 https://domain.innoxai.com$request_uri;
# }
# server {
#     listen 443 ssl;
#     listen [::]:443;
#     server_name domain.innoxai.com;
#     server_tokens off;
#     ssl_certificate /etc/ssl/certs/domain.crt;
#     ssl_certificate_key /etc/ssl/private/domain.key;
#     location / {
#         proxy_pass        http://docker-vircadia-domain;
#         proxy_set_header  Host              $host;
#         proxy_set_header  X-Real-IP         $remote_addr;
#         proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;
#         proxy_set_header  X-Forwarded-Host  $server_name;
#     }
# }

# server {
#     listen 80;
#     listen [::]:80;
#     server_name dashboard.innoxai.com;
#     return 301 https://dashboard.innoxai.com$request_uri;
# }
# server {
#     listen 443 ssl;
#     listen [::]:443;
#     server_name dashboard.innoxai.com;
#     server_tokens off;
#     ssl_certificate /etc/ssl/certs/dashboard.crt;
#     ssl_certificate_key /etc/ssl/private/dashboard.key;
#     location / {
#         proxy_pass        http://docker-vircadia-dashboard;
#         proxy_set_header  Host              $host;
#         proxy_set_header  X-Real-IP         $remote_addr;
#         proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;
#         proxy_set_header  X-Forwarded-Host  $server_name;
#     }
# }

server {
    listen 80;
    listen [::]:80;
    server_name metaverse.innoxai.com;
    return 301 https://metaverse.innoxai.com$request_uri;
}
server {
    listen 443 ssl;
    listen [::]:443;
    server_name metaverse.innoxai.com;

    server_tokens off;
    ssl_certificate /etc/ssl/certs/metaverse.crt;
    ssl_certificate_key /etc/ssl/private/metaverse.key;

    location / {
        proxy_pass        http://docker-vircadia-metaverse;
        proxy_set_header  Host              $host;
        proxy_set_header  X-Real-IP         $remote_addr;
        # proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header  X-Forwarded-Host  $server_name;
        proxy_set_header  X-Forwarded-Proto $scheme;
        add_header 'Access-Control-Allow-Credentials' 'true';
        add_header 'Access-Control-Allow-Origin' '*';

        # enable wss
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;

        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET,PUT,POST,DELETE,PATCH,OPTIONS';
            #
            # Custom headers and headers various browsers *should* be OK with but aren't
            #
            add_header 'Access-Control-Allow-Headers' 'x-vircadia-error-handle,Authorization,DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
            #
            # Tell client that this pre-flight info is valid for 20 days
            #
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }
        if ($request_method = 'POST') {
            #add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE' always;
            add_header 'Access-Control-Allow-Headers' 'x-vircadia-error-handle,Authorization,DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range,Authorization' always;
        }
        if ($request_method = 'DELETE') {
            #add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE' always;
            add_header 'Access-Control-Allow-Headers' 'x-vircadia-error-handle,Authorization,DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range,Authorization' always;
        }
        if ($request_method = 'GET') {
            #add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE' always;
            add_header 'Access-Control-Allow-Headers' 'x-vircadia-error-handle,Authorization,DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range,Authorization' always;
        }
   }
}
